name: CI/CD Pipeline - Serverless

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Test and Lint
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Run linting
      run: |
        flake8 meli_crawler/ --max-line-length=88 --extend-ignore=E203,W503
        black --check meli_crawler/
        isort --check-only meli_crawler/
    
    - name: Run tests
      run: |
        pytest --cov=meli_crawler --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Setup Node.js and Serverless
  setup-serverless:
    name: Setup Serverless Framework
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Serverless Framework
      run: |
        npm install -g serverless
        npm install
    
    - name: Verify Serverless installation
      run: |
        serverless --version
        npx serverless --version

  # Deploy to development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: setup-serverless
    environment: development
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ secrets.AWS_REGION_DEV }}
    
    - name: Deploy to AWS (Development)
      run: |
        npx serverless deploy --stage dev --region ${{ secrets.AWS_REGION_DEV }} --verbose
      env:
        ZYTE_API_KEY: ${{ secrets.ZYTE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: setup-serverless
    environment: staging
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        aws-region: ${{ secrets.AWS_REGION_STAGING }}
    
    - name: Deploy to AWS (Staging)
      run: |
        npx serverless deploy --stage staging --region ${{ secrets.AWS_REGION_STAGING }} --verbose
      env:
        ZYTE_API_KEY: ${{ secrets.ZYTE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: setup-serverless
    environment: production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'release' && github.event.action == 'published')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ secrets.AWS_REGION_PROD }}
    
    - name: Deploy to AWS (Production)
      run: |
        npx serverless deploy --stage prod --region ${{ secrets.AWS_REGION_PROD }} --verbose
      env:
        ZYTE_API_KEY: ${{ secrets.ZYTE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

  # Post-deployment tests
  post-deploy-test:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ secrets.AWS_REGION_PROD }}
    
    - name: Run health checks
      run: |
        echo "Running post-deployment health checks..."
        # Test Lambda functions
        echo "Testing Lambda functions..."
        # Add your health check logic here
        # Example: Test API endpoints, verify Lambda functions are working, etc.
        echo "‚úÖ Health checks completed"
    
    - name: Notify success
      if: success()
      run: |
        echo "üéâ Post-deployment tests passed!"
        echo "All Lambda functions are healthy and running correctly."
    
    - name: Notify failure
      if: failure()
      run: |
        echo "‚ùå Post-deployment tests failed!"
        echo "Please check the deployment and investigate issues."

  # Cleanup (optional)
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always() && (needs.deploy-dev.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ secrets.AWS_REGION_DEV }}
    
    - name: Cleanup failed deployment
      run: |
        echo "Cleaning up failed deployment..."
        # Only cleanup if deployment failed
        if [ "${{ needs.deploy-dev.result }}" == "failure" ]; then
          echo "Cleaning up development stage..."
          npx serverless remove --stage dev --region ${{ secrets.AWS_REGION_DEV }} --verbose || true
        fi
        if [ "${{ needs.deploy-staging.result }}" == "failure" ]; then
          echo "Cleaning up staging stage..."
          npx serverless remove --stage staging --region ${{ secrets.AWS_REGION_STAGING }} --verbose || true
        fi
        if [ "${{ needs.deploy-production.result }}" == "failure" ]; then
          echo "Cleaning up production stage..."
          npx serverless remove --stage prod --region ${{ secrets.AWS_REGION_PROD }} --verbose || true
        fi
