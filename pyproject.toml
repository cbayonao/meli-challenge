[project]
name = "meli-challenge"
version = "1.0.0"
description = "Web scraping solution for MercadoLibre Uruguay using Scrapy, AWS services, and AI validation"
authors = [
    {name = "Meli Challenge Team", email = "team@melichallenge.com"}
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "scrapy>=2.11.0",
    "boto3>=1.34.0",
    "python-decouple>=3.8",
    "pyyaml>=6.0",
    "scrapy-zyte-api>=0.7.0",
    # AI Validation System dependencies
    "openai>=1.0.0",
    "anthropic>=0.18.0",
    "google-generativeai>=0.3.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "jsonschema>=4.17.0",
    "click>=8.1.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0"
]

validation = [
    "openai>=1.0.0",
    "anthropic>=0.18.0",
    "google-generativeai>=0.3.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "jsonschema>=4.17.0",
    "click>=8.1.0"
]

[project.scripts]
validate = "validation.validation_cli:main"
run-validation = "validation.run_validation:main"

[project.urls]
Homepage = "https://github.com/your-org/meli-challenge"
Documentation = "https://github.com/your-org/meli-challenge#readme"
Repository = "https://github.com/your-org/meli-challenge"
Issues = "https://github.com/your-org/meli-challenge/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["meli_crawler", "validation"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs"
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests", "validation/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "validation: marks tests as validation tests"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["meli_crawler", "validation"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2
