[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "meli-challenge"
version = "1.0.0"
description = "Scrapy-based web scraping system for Mercado Libre Uruguay with AI validation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Camilo Bayona", email = "drcamilob@live.com"}
]
maintainers = [
    {name = "Camilo Bayona", email = "drcamilob@live.com"}
]
keywords = ["scraping", "scrapy", "mercadolibre", "ai-validation", "aws", "dynamodb", "sqs"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: HTML",
    "Framework :: Scrapy",
]
requires-python = ">=3.11"
dependencies = [
    # Core Scrapy dependencies
    "scrapy>=2.11.0",
    "scrapy-zyte-api>=0.7.0",
    
    # AWS dependencies
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    
    # Data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    
    # Configuration and environment
    "python-decouple>=3.8",
    "pyyaml>=6.0",
    
    # AI Validation System
    "openai>=1.0.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    "pydantic>=2.0.0",
    "jsonschema>=4.17.0",
    "click>=8.1.0",
    "scrapy-s3pipeline>=0.7.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-html>=3.1.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

# Serverless deployment (Node.js tools, not Python packages)
# Note: These need to be installed via npm, not pip
serverless = [
    "aws-cdk-lib>=2.0.0",
    "boto3>=1.34.0",
    "botocore>=1.34.0",
]

# All optional dependencies
all = [
    "black>=23.0.0",
    "flake8>=7.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-html>=3.1.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "aws-cdk-lib>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/meli-challenge"
Documentation = "https://meli-challenge.readthedocs.io"
Repository = "https://github.com/your-org/meli-challenge"
"Bug Tracker" = "https://github.com/your-org/meli-challenge/issues"
Changelog = "https://github.com/your-org/meli-challenge/blob/main/CHANGELOG.md"

[project.scripts]
meli-identify = "meli_crawler.spiders.meli_uy_identify:main"
meli-collect = "meli_crawler.spiders.meli_uy_collect:main"
validate-data = "validation.run_validation:main"

[project.gui-scripts]
meli-dashboard = "meli_crawler.gui.dashboard:main"

[tool.hatch.build.targets.wheel]
packages = [
    "meli_crawler",
    "validation",
    "tests",
]

[tool.hatch.build.targets.sdist]
include = [
    "/meli_crawler",
    "/validation",
    "/tests",
    "/docs",
    "/.github",
    "/infrastructure",
    "/serverless",
    "/Makefile",
    "/README.md",
    "/ARCHITECTURE.md",
    "/QUICKSTART.md",
    "/CI_CD_README.md",
    "/SERVERLESS_README.md",
    "/VALIDATION_SUMMARY.md",
]

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["meli_crawler", "validation", "tests"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "scrapy.*",
    "pandas.*",
    "numpy.*",
    "openai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=meli_crawler",
    "--cov=validation",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "spiders: marks tests as spider tests",
    "pipelines: marks tests as pipeline tests",
    "validation: marks tests as validation tests",
]

[tool.coverage.run]
source = ["meli_crawler", "validation"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/ENV/*",
    "*/env.bak/*",
    "*/venv.bak/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "coverage_html"

[tool.coverage.xml]
output = "coverage.xml"

# UV specific configuration
[tool.uv]
# Python version to use
python = "3.11"

# Virtual environment configuration
venv = true
venv-prompt = "meli-challenge"

# Lock file configuration
lock = true
lock-format = "modern"

# Source configuration
source = "index"

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "meli_crawler/__init__.py:__version__",
    "validation/__init__.py:__version__",
]

[tool.commitizen.customize]
message_template = "{{change_type}}{% if scope %}({{scope}}){% endif %}: {{subject}}"
example = "feat(api): add new endpoint for user authentication"
schema = "<type>(<scope>): <subject>"
schema_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\\(.+\\))?: .+"
info = "Commit message format: <type>(<scope>): <subject>"
info_path = ".git/COMMIT_CONVENTIONAL.md"

[tool.commitizen.customize.questions]
change_type = {type = "list", choices = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "build", "ci", "chore", "revert"], message = "Select the type of change you are committing:"}
scope = {type = "input", message = "What is the scope of this change (e.g., api, ui, validation, spider, pipeline):"}
subject = {type = "input", message = "Write a short, imperative description of the change:"}
body = {type = "input", message = "Provide a longer description of the change (optional):"}
breaking = {type = "input", message = "List any breaking changes (optional):"}
issues = {type = "input", message = "List any issues closed by this change (optional):"}
